/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type BlogPost = {
  _id: string;
  _type: "blogPost";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  introduction?: string;
  mainContent?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  conclusion?: string;
  readingTime?: number;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
};

export type Recipe = {
  _id: string;
  _type: "recipe";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  cookingTime?: number;
  servings?: number;
  difficulty?: "easy" | "medium" | "hard";
  ingredients?: Array<{
    amount?: string;
    item?: string;
    _key: string;
  }>;
  instructions?: Array<string>;
  nutrition?: {
    calories?: number;
    protein?: number;
    carbs?: number;
    fat?: number;
    fiber?: number;
  };
  cuisineType?: "croatian" | "italian" | "chinese" | "mexican" | "indian" | "american";
  mealType?: "dinner" | "lunch" | "snack" | "appetizer" | "breakfast" | "beverage" | "dessert" | "vegeterian" | "salad" | "soup";
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  status?: "draft" | "published";
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  email?: string;
  supabaseUserId?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | BlogPost | Recipe | Author | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: RECIPE_QUERY
// Query: *[_type== "recipe" && status=="published" && defined(slug.current)]{  _id,  title,  "mainImage": mainImage.asset->url,  description,  cookingTime,  servings,  difficulty,  ingredients,  instructions,  nutrition,  cuisineType,  mealType,  author->{  supabaseUserId,  name,  email  }}
export type RECIPE_QUERYResult = Array<{
  _id: string;
  title: string | null;
  mainImage: string | null;
  description: string | null;
  cookingTime: number | null;
  servings: number | null;
  difficulty: "easy" | "hard" | "medium" | null;
  ingredients: Array<{
    amount?: string;
    item?: string;
    _key: string;
  }> | null;
  instructions: Array<string> | null;
  nutrition: {
    calories?: number;
    protein?: number;
    carbs?: number;
    fat?: number;
    fiber?: number;
  } | null;
  cuisineType: "american" | "chinese" | "croatian" | "indian" | "italian" | "mexican" | null;
  mealType: "appetizer" | "beverage" | "breakfast" | "dessert" | "dinner" | "lunch" | "salad" | "snack" | "soup" | "vegeterian" | null;
  author: {
    supabaseUserId: string | null;
    name: string | null;
    email: string | null;
  } | null;
}>;
// Variable: RECIPE_ID_QUERY
// Query: *[_type == "recipe" && _id == $id][0]{    title,    mainImage,    description,    ingredients,    instructions,    nutrition,    cookingTime,    servings,    difficulty,    mealType,    author->{ name }  }
export type RECIPE_ID_QUERYResult = {
  title: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  description: string | null;
  ingredients: Array<{
    amount?: string;
    item?: string;
    _key: string;
  }> | null;
  instructions: Array<string> | null;
  nutrition: {
    calories?: number;
    protein?: number;
    carbs?: number;
    fat?: number;
    fiber?: number;
  } | null;
  cookingTime: number | null;
  servings: number | null;
  difficulty: "easy" | "hard" | "medium" | null;
  mealType: "appetizer" | "beverage" | "breakfast" | "dessert" | "dinner" | "lunch" | "salad" | "snack" | "soup" | "vegeterian" | null;
  author: {
    name: string | null;
  } | null;
} | null;
// Variable: USER_RECIPES_QUERY
// Query: *[_type == "recipe" && author->supabaseUserId == $userId]{    _id,    title,    "mainImage": mainImage.asset->url,    description,    cookingTime,    servings,    difficulty,    ingredients,    instructions,    nutrition,    cuisineType,    mealType,    author->{      supabaseUserId,      name,      email    }  }
export type USER_RECIPES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  mainImage: string | null;
  description: string | null;
  cookingTime: number | null;
  servings: number | null;
  difficulty: "easy" | "hard" | "medium" | null;
  ingredients: Array<{
    amount?: string;
    item?: string;
    _key: string;
  }> | null;
  instructions: Array<string> | null;
  nutrition: {
    calories?: number;
    protein?: number;
    carbs?: number;
    fat?: number;
    fiber?: number;
  } | null;
  cuisineType: "american" | "chinese" | "croatian" | "indian" | "italian" | "mexican" | null;
  mealType: "appetizer" | "beverage" | "breakfast" | "dessert" | "dinner" | "lunch" | "salad" | "snack" | "soup" | "vegeterian" | null;
  author: {
    supabaseUserId: string | null;
    name: string | null;
    email: string | null;
  } | null;
}>;
// Variable: BLOG_QUERY
// Query: *[_type=="blogPost"]{  _id,  title,  mainImage,  description,  readingTime,  "author":author->name}
export type BLOG_QUERYResult = Array<{
  _id: string;
  title: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  description: string | null;
  readingTime: number | null;
  author: string | null;
}>;
// Variable: BLOG_ID_QUERY
// Query: *[_type=="blogPost"&&_id==$id][0]{  title,  mainImage,  backgroundImage,  readingTime,  introduction,  mainImage,  mainContent,  conclusion,  "author":author->name}
export type BLOG_ID_QUERYResult = {
  title: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  backgroundImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  readingTime: number | null;
  introduction: string | null;
  mainContent: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  conclusion: string | null;
  author: string | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type== \"recipe\" && status==\"published\" && defined(slug.current)]{\n  _id,\n  title,\n  \"mainImage\": mainImage.asset->url,\n  description,\n  cookingTime,\n  servings,\n  difficulty,\n  ingredients,\n  instructions,\n  nutrition,\n  cuisineType,\n  mealType,\n  author->{\n  supabaseUserId,\n  name,\n  email\n  }\n}": RECIPE_QUERYResult;
    "*[_type == \"recipe\" && _id == $id][0]{\n    title,\n    mainImage,\n    description,\n    ingredients,\n    instructions,\n    nutrition,\n    cookingTime,\n    servings,\n    difficulty,\n    mealType,\n    author->{ name }\n  }": RECIPE_ID_QUERYResult;
    "*[_type == \"recipe\" && author->supabaseUserId == $userId]{\n    _id,\n    title,\n    \"mainImage\": mainImage.asset->url,\n    description,\n    cookingTime,\n    servings,\n    difficulty,\n    ingredients,\n    instructions,\n    nutrition,\n    cuisineType,\n    mealType,\n    author->{\n      supabaseUserId,\n      name,\n      email\n    }\n  }": USER_RECIPES_QUERYResult;
    "*[_type==\"blogPost\"]{\n  _id,\n  title,\n  mainImage,\n  description,\n  readingTime,\n  \"author\":author->name\n}": BLOG_QUERYResult;
    "*[_type==\"blogPost\"&&_id==$id][0]{\n  title,\n  mainImage,\n  backgroundImage,\n  readingTime,\n  introduction,\n  mainImage,\n  mainContent,\n  conclusion,\n  \"author\":author->name\n}": BLOG_ID_QUERYResult;
  }
}
